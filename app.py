{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a7f3b1e7-542a-4a6b-9c6a-b9ea7f06a9ba",
   "metadata": {},
   "outputs": [
    {
     "ename": "UndefinedValueError",
     "evalue": "OPEN_API_KEY not found. Declare it as envvar or define a default value.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mUndefinedValueError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[10], line 35\u001b[0m\n\u001b[0;32m     27\u001b[0m st\u001b[38;5;241m.\u001b[39mset_page_config(\n\u001b[0;32m     28\u001b[0m     page_title\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFinX\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m     29\u001b[0m     page_icon\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mðŸ¤–\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m     30\u001b[0m     layout\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwide\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m     31\u001b[0m )\n\u001b[0;32m     34\u001b[0m user_prompt \u001b[38;5;241m=\u001b[39m st\u001b[38;5;241m.\u001b[39mchat_input()\n\u001b[1;32m---> 35\u001b[0m llm \u001b[38;5;241m=\u001b[39m ChatOpenAI(openai_api_key\u001b[38;5;241m=\u001b[39mconfig(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mOPEN_API_KEY\u001b[39m\u001b[38;5;124m\"\u001b[39m), temperature\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n\u001b[0;32m     37\u001b[0m prompt1 \u001b[38;5;241m=\u001b[39m PromptTemplate(\n\u001b[0;32m     38\u001b[0m     input_variables\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mchat_history\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhuman_input\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[0;32m     39\u001b[0m     template\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\"\"\u001b[39m\u001b[38;5;124mYou are a financial advisor to help user with budgeting plans. \u001b[39m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     51\u001b[0m \u001b[38;5;124m                AI:\u001b[39m\u001b[38;5;124m\"\"\"\u001b[39m\n\u001b[0;32m     52\u001b[0m )\n\u001b[0;32m     54\u001b[0m parser \u001b[38;5;241m=\u001b[39m PydanticOutputParser(pydantic_object\u001b[38;5;241m=\u001b[39muser_detail)\n",
      "File \u001b[1;32m~\\anaconda3\\New folder\\Lib\\site-packages\\decouple.py:248\u001b[0m, in \u001b[0;36mAutoConfig.__call__\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    245\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconfig:\n\u001b[0;32m    246\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_load(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msearch_path \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_caller_path())\n\u001b[1;32m--> 248\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconfig(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\anaconda3\\New folder\\Lib\\site-packages\\decouple.py:107\u001b[0m, in \u001b[0;36mConfig.__call__\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    103\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m    104\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    105\u001b[0m \u001b[38;5;124;03m    Convenient shortcut to get.\u001b[39;00m\n\u001b[0;32m    106\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 107\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32m~\\anaconda3\\New folder\\Lib\\site-packages\\decouple.py:92\u001b[0m, in \u001b[0;36mConfig.get\u001b[1;34m(self, option, default, cast)\u001b[0m\n\u001b[0;32m     90\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m     91\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(default, Undefined):\n\u001b[1;32m---> 92\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m UndefinedValueError(\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m not found. Declare it as envvar or define a default value.\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;241m.\u001b[39mformat(option))\n\u001b[0;32m     94\u001b[0m     value \u001b[38;5;241m=\u001b[39m default\n\u001b[0;32m     96\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(cast, Undefined):\n",
      "\u001b[1;31mUndefinedValueError\u001b[0m: OPEN_API_KEY not found. Declare it as envvar or define a default value."
     ]
    }
   ],
   "source": [
    "import os\n",
    "import re\n",
    "import streamlit as st\n",
    "import json\n",
    "from typing import List\n",
    "import pandas as pd\n",
    "import gspread\n",
    "from oauth2client.service_account import ServiceAccountCredentials\n",
    "#############\n",
    "from langchain.chat_models import ChatOpenAI\n",
    "from langchain.memory import ConversationBufferMemory\n",
    "from langchain.chains import LLMChain\n",
    "from langchain.prompts import PromptTemplate\n",
    "from langchain_community.chat_models import ChatOpenAI\n",
    "from langchain.output_parsers import PydanticOutputParser, OutputFixingParser\n",
    "from langchain_core.pydantic_v1 import BaseModel, Field\n",
    "from decouple import config\n",
    "\n",
    "#parser\n",
    "class user_detail(BaseModel):\n",
    "    annual_income: int = Field(description=\"integer, default: 0\")\n",
    "    marital_status: str = Field(description=\"single or married, default: NaN\")\n",
    "    cost_of_living: int = Field(description=\"Integer value, default: 0\")\n",
    "    age: int = Field(description=\"Integer value, User's age, default: 0\")\n",
    "    \n",
    "\n",
    "st.set_page_config(\n",
    "    page_title=\"FinX\",\n",
    "    page_icon=\"ðŸ¤–\",\n",
    "    layout=\"wide\"\n",
    ")\n",
    "\n",
    "user_prompt = st.chat_input()\n",
    "# Updated to use Gemini API\n",
    "llm = ChatOpenAI(openai_api_key=config(\"GEMINI_API_KEY\"), temperature=0)\n",
    "\n",
    "prompt1 = PromptTemplate(\n",
    "    input_variables=[\"chat_history\", \"human_input\"],\n",
    "    template=\"\"\"You are a financial advisor to help user with budgeting plans. \n",
    "                Keep all of the currency in INR â‚¹\n",
    "                Follow these steps \n",
    "                1. Ask user questions to Gather following information\n",
    "                    a. Annual Income \n",
    "                    b. Marital Status \n",
    "                    c. Cost of living \n",
    "                    d. Age \n",
    "                2. If user has trouble figuring out cost of living ask general questions and give it a general amount yourself \n",
    "                3. Once you have received all of these information generate a budgeting plan for the next 5 years of this person for comfortable retirement plan by age 50 \n",
    "                chat_history: {chat_history}\n",
    "                Human: {human_input}\n",
    "                AI:\"\"\"\n",
    ")\n",
    "\n",
    "parser = PydanticOutputParser(pydantic_object=user_detail)\n",
    "output_parser = OutputFixingParser.from_llm(parser=parser, llm=llm)\n",
    "\n",
    "prompt2 = PromptTemplate(\n",
    "    input_variables=[\"chat_history\", \"human_input\"],\n",
    "    template=\"\"\"You are a financial advisor to help user with budgeting plans. \n",
    "                Keep all of the currency in INR â‚¹\n",
    "                Follow these steps \n",
    "                If user tries to give information about \n",
    "                    a. Annual Income \n",
    "                    b. Marital Status \n",
    "                    c. Cost of living \n",
    "                    d. age \n",
    "                all at once or step by step then just output a dictionary of each input and please make sure the money amount is all in numbers and the String starts with capital letter\n",
    "                Annual Income \n",
    "                Marital Status \n",
    "                Cost of living \n",
    "                Age \n",
    "                update keys if user updates any \n",
    "                only reply with dictionary and nothing else and do not populate it unless the user has provided these informations\n",
    "                chat_history: {chat_history}\n",
    "                Human: {human_input} \n",
    "                AI:\"\"\",\n",
    "    partial_variables={\"format_instructions\": parser.get_format_instructions()},\n",
    ")\n",
    "\n",
    "memory = ConversationBufferMemory(memory_key=\"chat_history\", llm=llm)\n",
    "llm_chain = LLMChain(llm=llm, memory=memory, prompt=prompt1)\n",
    "\n",
    "memory2 = ConversationBufferMemory(memory_key=\"chat_history\", llm=llm)\n",
    "llm_chain_2 = LLMChain(llm=llm, memory=memory2, prompt=prompt2)\n",
    "\n",
    "hide_st_style = \"\"\"\n",
    "            <style>\n",
    "            #MainMenu {visibility: hidden;}\n",
    "            footer {visibility: hidden;}\n",
    "            header {visibility: hidden;}\n",
    "            </style>\n",
    "            \"\"\"\n",
    "st.markdown(hide_st_style, unsafe_allow_html=True)\n",
    "\n",
    "st.title(\"FinX\")\n",
    "\n",
    "if \"messages\" not in st.session_state.keys():\n",
    "    st.session_state.messages = [\n",
    "        {\"role\": \"assistant\", \"content\": \"Hi I am your financial advisor, will you be willing to share a few details with me\"}\n",
    "    ]\n",
    "\n",
    "for message in st.session_state.messages:\n",
    "    with st.chat_message(message[\"role\"]):\n",
    "        st.write(message[\"content\"])\n",
    "\n",
    "if user_prompt is not None:\n",
    "    st.session_state.messages.append({\"role\": \"user\", \"content\": user_prompt})\n",
    "    with st.chat_message(\"user\"):\n",
    "        st.write(user_prompt)\n",
    "\n",
    "def process_data(parsed_output):\n",
    "    user_data = {\n",
    "        'annual_income': parsed_output.annual_income,\n",
    "        'marital_status': parsed_output.marital_status,\n",
    "        'cost_of_living': parsed_output.cost_of_living,\n",
    "        'age': parsed_output.age\n",
    "    }\n",
    "    user_data_json = json.dumps(user_data)\n",
    "    print(user_data)\n",
    "    print(user_data_json)\n",
    "    st.session_state.user_info.update(user_data)\n",
    "\n",
    "if st.session_state.messages[-1][\"role\"] != \"assistant\":\n",
    "    with st.chat_message(\"assistant\"):\n",
    "        with st.spinner(\"Loading...\"):\n",
    "            ai_response = llm_chain.predict(human_input=user_prompt)\n",
    "            st.write(ai_response)\n",
    "\n",
    "            ai_dict = llm_chain_2.predict(human_input=user_prompt)\n",
    "            parsed_output = output_parser.parse(ai_dict)\n",
    "            print(\"This is Parsed Output:\", parsed_output)\n",
    "\n",
    "            # Google Sheets connection\n",
    "            scope = [\"https://spreadsheets.google.com/feeds\", \"https://www.googleapis.com/auth/drive\"]\n",
    "            creds = ServiceAccountCredentials.from_json_keyfile_name('path/to/your/service_account.json', scope)\n",
    "            client = gspread.authorize(creds)\n",
    "\n",
    "            sheet = client.open(\"Your Google Sheet Name\").worksheet(\"Sheet1\")\n",
    "\n",
    "            sheet_data = [parsed_output.dict()]\n",
    "            sheet.append_row([parsed_output.annual_income, parsed_output.marital_status, parsed_output.cost_of_living, parsed_output.age])\n",
    "\n",
    "            st.write(\"Data updated in Google Sheet successfully\")\n",
    "\n",
    "            process_data(parsed_output)\n",
    "\n",
    "    new_ai_message = {\"role\": \"assistant\", \"content\": ai_response}\n",
    "    st.session_state.messages.append(new_ai_message)\n",
    "\n",
    "if 'user_info' not in st.session_state:\n",
    "    st.session_state.user_info = {}\n",
    "\n",
    "with st.sidebar:\n",
    "    st.subheader(\"User Information\")\n",
    "    if 'user_info' in st.session_state and st.session_state.user_info:\n",
    "        for key, value in st.session_state.user_info.items():\n",
    "            st.write(f\"{key.capitalize()}: {value}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
